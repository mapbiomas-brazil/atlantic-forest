// Define the geometry of the Mata Atlantica.
var limite_MA = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-48.593359954293625, -30.678347823900353],
          [-47.275000579293625, -25.525376684152373],
          [-40.595313079293625, -23.284530667538736],
          [-33.915625579293625, -6.580343714417967],
          [-35.453711516793625, -4.217995607905081],
          [-44.198828704293625, -17.856203449528717],
          [-50.483008391793625, -17.52126295946964],
          [-55.712500579293625, -21.74193426005608],
          [-55.492774016793625, -29.72888025446976]]]);

// Define the output version.
var versao_out = '1'

// Define the version of the training points.
var versao_pt = '4'

// Define the input and output directories.
var dirin = '';
var dirout = '';

// Define the visualization parameters for the mosaics.
var vis_mos = {
    bands: ['swir1_median', 'nir_median', 'red_median'],
    gain: [0.08, 0.06, 0.2],
    gamma: 0.85
};

// Import the palettes module.
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define the visualization parameters for the classification.
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

// Load the regions collection.
var regioesCollection = ee.FeatureCollection('projects/mapbiomas-workspace/AUXILIAR/Mata_Atlantica_regions_col5_250mil')//.filterBounds(geometry)
Map.addLayer(regioesCollection)

// Define the band names for the training data.
var bandNames = ['gcvi_median_dry','gcvi_median_wet','red_median_wet',
                 'swir1_median_dry','gcvi_median','ndvi_median_wet',
                 'red_median','cai_median','savi_median_wet','swir1_median',
                 'gcvi_stdDev','green_min','swir1_median_wet',
                 'savi_median_dry','nir_median','swir2_median_wet',
                 'red_min','savi_median','nir_median_wet','evi2_median',
                 'red_median_dry','evi2_median_wet','swir2_median_dry',
                 'swir2_median','ndvi_median_dry','green_median_wet',
                 'green_median','wefi_median_wet','evi2_median_dry',
                 'ndwi_median_wet','ndwi_stdDev','ndwi_median',
                 'slope']

// Define the biome.
var bioma = "MATAATLANTICA";

// Define the color palette for the NDVI amplitude.
var ndvi_color = '0f330f, 005000, 4B9300, 92df42, bff0bf, FFFFFF, eee4c7, ecb168, f90000'

// Define the visualization parameters for the NDFI amplitude.
var visParNDFI_amp = {'min':0, 'max':300, 'palette':ndvi_color};

// Define the asset path for the mosaics.
var asset_mosaicos_col6 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';

// Load the mosaic of clusters.
var mosaicos_MA_clusters = ee.Image('projects/mapbiomas-workspace/MOSAICOS/mosaicos_MA_clusters_1985_2023')
print(mosaicos_MA_clusters)
Map.addLayer(mosaicos_MA_clusters)

// Define the list of seeds.
var lista_seeds = [1]

// Loop through the seeds.
for (var i_seed=0;i_seed<lista_seeds.length; i_seed++){
  // Get the current seed.
  var seed = lista_seeds[i_seed];

  // Load the training points.
  var pts = ee.FeatureCollection(dirin+'samples_stable_v'+versao_pt+'_seed_'+seed)
  
  // Define the years for which to process the data.
  var anos = [
              1985,1986,1987,1988,
              1989,1990,1991,1992,
              1993,1994,1995,1996,
              1997,1998,1999,2000,
              2001,2002,2003,2004,
              2005,2006,2007,2008,
              2009,2010,2011,2012,
              2013,2014,2015,2016,
              2017,2018,2019,2020,
              2021,2022,2023
              ];
  
//var anos = [2021];
  
  // Loop through the years.
  for (var i_ano=0;i_ano<anos.length; i_ano++){
    // Get the current year.
    var ano = anos[i_ano];

    // Define the years and assets for the current year. l5 = Landsat 5, l7 = Landsat 7, l8 = Landsat 8
    if      (ano == 1985) {
      var ano1 = 1985; var ano2 = 1986; var ano3 = 1987
      var asset1 = 'l5'; var asset2 = 'l5'; var asset3 = 'l5'
    }
    else if (ano == 1986) {
      var ano1 = 1986; var ano2 = 1985; var ano3 = 1987
      var asset1 = 'l5'; var asset2 = 'l5'; var asset3 = 'l5'
    }
    else if (ano == 2000) {
      var ano1 = 2000; var ano2 = 1999; var ano3 = 1998
      var asset1 = 'l7'; var asset2 = 'l5'; var asset3 = 'l5'
    }
    else if (ano == 2001)   {
      var ano1 = 2001; var ano2 = 2000; var ano3 = 1999
      var asset1 = 'l7'; var asset2 = 'l7'; var asset3 = 'l5'
    }
    else if (ano == 2002) {
      var ano1 = 2002; var ano2 = 2001; var ano3 = 2000
      var asset1 = 'l7'; var asset2 = 'l7'; var asset3 = 'l7'
    }
    else if (ano == 2003) {
      var ano1 = 2003; var ano2 = 2002; var ano3 = 2001
       var asset1 = 'l5'; var asset2 = 'l7'; var asset3 = 'l7'
    }
    else if (ano == 2004) {
      var ano1 = 2004; var ano2 = 2003; var ano3 = 2002
       var asset1 = 'l5'; var asset2 = 'l5'; var asset3 = 'l7'
    }
    else if (ano == 2012) {
      var ano1 = 2012; var ano2 = 2011; var ano3 = 2010
      var asset1 = 'l7'; var asset2 = 'l5'; var asset3 = 'l5'
    }
    else if (ano == 2013) {
      var ano1 = 2013; var ano2 = 2012; var ano3 = 2011
      var asset1 = 'l8'; var asset2 = 'l7'; var asset3 = 'l5'
    }
    else if (ano == 2014) {
      var ano1 = 2014; var ano2 = 2013; var ano3 = 2012
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l7'
    }
    else if (ano == 2015) {
      var ano1 = 2015; var ano2 = 2014; var ano3 = 2013
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2016) {
      var ano1 = 2016; var ano2 = 2015; var ano3 = 2014
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2017) {
      var ano1 = 2017; var ano2 = 2016; var ano3 = 2015
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2018) {
      var ano1 = 2018; var ano2 = 2017; var ano3 = 2016
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2019) {
      var ano1 = 2019; var ano2 = 2018; var ano3 = 2017
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2020) {
      var ano1 = 2020; var ano2 = 2019; var ano3 = 2018
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2021) {
      var ano1 = 2021; var ano2 = 2020; var ano3 = 2019
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2022) {
      var ano1 = 2022; var ano2 = 2021; var ano3 = 2020
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else if (ano == 2023) {
      var ano1 = 2023; var ano2 = 2022; var ano3 = 2021
      var asset1 = 'l8'; var asset2 = 'l8'; var asset3 = 'l8'
    }
    else {
      var ano1 = ano; var ano2 = ( ano - 1); var ano3 = ( ano - 2)
      var asset1 = 'l5'; var asset2 = 'l5'; var asset3 = 'l5'
    }
  
    var regioes_lista = [
        ['reg_01'],['reg_02'],['reg_03'],['reg_04'],['reg_05'],['reg_06'],['reg_07'],['reg_08'],['reg_09'],['reg_10'],['reg_11'],['reg_12'],['reg_13'],['reg_14'],['reg_15'],
        ['reg_16'],['reg_17'],['reg_18'],['reg_19'],['reg_20'],['reg_21'],['reg_22'],['reg_23'],['reg_24'],['reg_25'],['reg_26'],['reg_27'],['reg_28'],['reg_29'],['reg_30']
        ]
//    var regioes_lista = [['reg_01']]
    
    // Loop through the regions.
    for (var i_regiao=0;i_regiao<regioes_lista.length; i_regiao++){
      // Get the current region.
      var lista = regioes_lista[i_regiao];
      var regiao = lista[0];
      var limite = regioesCollection.filterMetadata('reg_id', "equals", regiao);
      
      // Load the mosaic for the current year and region.
      var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col6)
                          .filterMetadata('biome', 'equals', bioma)
                          .filterMetadata('year', 'equals', ano1)
                          .filter(ee.Filter.eq('satellite', asset1))
                          .filterBounds(limite)
                          .mosaic()

    var img_ano = ee.Image(ano1)

      // Add the cluster, NDFI amplitude, green texture, NDFI median, longitude, latitude, and year bands to the mosaic.
      mosaicoTotal = mosaicoTotal.select(bandNames)
        .addBands(mosaicos_MA_clusters.select(
          ['clusters_'+ano1, 'amp_ndfi_3anos_'+ano1, 'clusters_green_text_'+ano1, 
          'clusters_ndfi_median_'+ano1, 'longitude','latitude']))
        .addBands(img_ano.rename('ano'))
      
//      print(mosaicoTotal)
//      Map.addLayer(mosaicoTotal, vis_mos, 'mosaico '+ ano, false);
  
  
      // Filter the training points to the current region.
      var pts_reg = pts.filterMetadata('reg_id', 'equals', regiao)
  
      // Sample the mosaic using the training points.
      var training = mosaicoTotal.sampleRegions({
          'collection': pts_reg,
          'scale': 30,
          'tileScale': 4,
          'geometries': true
      });
        
      // Merge the training data for all regions.
      if (i_regiao == 0){ var training_reg = training }  
      else {training_reg = training_reg.merge(training); }
  
    
  
    }    
  
//  print(training_reg.limit(1))
  
  // Export the training data to an asset.
  Export.table.toAsset(training_reg, 'pontos_train_v'+versao_out+'_'+ano+'_seed_'+seed, dirout + 'pontos_train_v'+versao_out+'_'+ano+'_seed_'+seed);  
  
  }
}
